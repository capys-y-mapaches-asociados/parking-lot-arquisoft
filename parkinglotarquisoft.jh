
application {
  config {
    baseName gateway,
    applicationType gateway,
    packageName co.edu.icesi,
    authenticationType jwt,
    prodDatabaseType postgresql,
    clientFramework angularX,
    buildTool maven,
    testFrameworks [cypress],
  }
  entities * 
  dto * with mapstruct
  service * with serviceImpl
}

application {
  config {
    baseName parking,
    applicationType microservice,
    packageName co.edu.icesi,
    authenticationType jwt,
    prodDatabaseType postgresql,
    devDatabaseType h2Disk,
	buildTool maven,
    enableHibernateCache true,
    serverPort 8081,
    serviceDiscoveryType eureka,
  }
  entities ParkingLot, ParkingSpot, Barrier, Ticket
  dto * with mapstruct
  service * with serviceImpl
}

application {
  config {
    baseName reservations,
    applicationType microservice,
    packageName co.edu.icesi,
    authenticationType jwt,
    prodDatabaseType postgresql,
    devDatabaseType h2Disk,
    buildTool maven,
    enableHibernateCache true,
    serverPort 8082,
    serviceDiscoveryType eureka,
  }
  entities Reservation, Customer, Notification
  dto * with mapstruct
  service * with serviceImpl
}

application {
  config {
    baseName payments,
    applicationType microservice,
    packageName co.edu.icesi,
    authenticationType jwt,
    prodDatabaseType postgresql,
    devDatabaseType h2Disk,
    buildTool maven,
    enableHibernateCache true,
    serverPort 8083,
    serviceDiscoveryType eureka,
  }
  entities Payment
  dto * with mapstruct
  service * with serviceImpl
}

entity ParkingLot {
  name String required unique, 
  location String required minlength(12), 
  capacity Integer required max(13000)
}

enum ParkingSpotStatus {
  OCCUPIED,
  AVAILABLE,
  RESERVED,
  OUT_OF_SERVICE
}

enum ParkingSpotType {
  REGULAR,
  HANDICAPPED,
  MATERNITY
}

enum ParkingSpotVehicle {
  CARGO_LARGE
  CARGO,
  CAR_LARGE,
  CAR,
  E_CAR,
  MOTORBIKE,
  BIKE
}

entity ParkingSpot {
  number Integer required min(1) max(13000),
  status ParkingSpotStatus required,
  spotType ParkingSpotType required, 
  spotVehicle ParkingSpotVehicle required
}

enum ReservationStatus {
  PLACED,
  ACTIVE,
  EXPIRED,
  CANCELLED
}

entity Reservation {
  ticketId Integer required,
  startTime Instant required, 
  endTime Instant required, 
  status ReservationStatus required, 
  reservationCode String required unique pattern (/^([A-Z]{2})-([A-Fa-f0-9]{10, 14})$/)
}

entity Customer {
  firstName String required, 
  lastName String required,
  email String required pattern(/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/), 
  password String required pattern(/^[a-fA-F0-9]{64}$/)
}

entity Notification {
  message String minlength(100) maxlength(1000) required,
  sentAt Instant required,
}

enum TicketStatus {
  ACTIVE,
  EXPIRED
}

enum BarrierType {
  ENTRY,
  EXIT
}

enum BarrierStatus {
  OPEN,
  CLOSED,
  DISABLED,
  MAINTENANCE
}

entity Ticket {
  ticketCode String required unique pattern(/^[A-F0-9]{6, 10}$/), 
  issuedAt Instant required, 
  entryTime Instant required, 
  exitTime Instant required, 
  status TicketStatus required
}

entity Barrier {
  name String required, 
  type BarrierType required,
  status BarrierStatus required
}

enum PaymentStatus {
  PENDING,
  PLACED,
  RECEIVED,
  REFUNDED
}

enum PaymentMethod {
  CARD,
  CASH,
  TRANSFERENCE
}

entity Payment {
  customerId Integer required,
  reservationID Integer unique,
  amount Float required max(1000.00), 
  paymentStatus PaymentStatus required, 
  paymentMethod PaymentMethod required
}

relationship OneToMany {
  ParkingLot{parkingSpots required} to ParkingSpot{parkingLotId required},
  Customer{reservations} to Reservation{customerId},
  Notification{reservationId required} to Reservation{notifications},
}

relationship ManyToOne {
  Barrier{parkingLot required} to ParkingLot {barriers required},
  Ticket{parkingSpotId required} to ParkingSpot,
}

deployment {
  deploymentType docker-compose
  appsFolders [gateway, parking, reservations, payments]
  dockerRepositoryName "zacwastaken"
}

deployment {
  deploymentType kubernetes
  appsFolders [gateway, parking, reservations, payments]
  dockerRepositoryName "zacwastaken"
}
